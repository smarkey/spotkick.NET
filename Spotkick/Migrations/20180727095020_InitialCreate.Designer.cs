// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Spotkick.Models;

namespace Spotkick.Migrations
{
    [DbContext(typeof(SpotkickContext))]
    [Migration("20180727095020_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Spotkick.Models.Bandsintown.Artist", b =>
                {
                    b.Property<int>("PrimaryKeyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FacebookPageUrl");

                    b.Property<int>("Id");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Mbid");

                    b.Property<string>("Name");

                    b.Property<string>("SpotifyId");

                    b.Property<string>("ThumbUrl");

                    b.Property<int>("TrackerCount");

                    b.Property<int>("UpcomingEventCount");

                    b.Property<string>("Url");

                    b.HasKey("PrimaryKeyId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Spotkick.Models.Bandsintown.Event", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ArtistPrimaryKeyId");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Description");

                    b.Property<DateTime>("OnSaleDateTime");

                    b.Property<string>("Url");

                    b.Property<int?>("VenueId");

                    b.HasKey("Id");

                    b.HasIndex("ArtistPrimaryKeyId");

                    b.HasIndex("VenueId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Spotkick.Models.Bandsintown.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EventId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("Spotkick.Models.Bandsintown.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("Spotkick.Models.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OwnedById");

                    b.HasKey("Id");

                    b.HasIndex("OwnedById");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Spotkick.Models.Spotify.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessToken");

                    b.Property<long>("ExpiresIn");

                    b.Property<string>("TokenType");

                    b.HasKey("Id");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Spotkick.Models.Spotify.Track", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Spotkick.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName");

                    b.Property<int?>("TokenId");

                    b.HasKey("Id");

                    b.HasIndex("TokenId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Spotkick.Models.Bandsintown.Event", b =>
                {
                    b.HasOne("Spotkick.Models.Bandsintown.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistPrimaryKeyId");

                    b.HasOne("Spotkick.Models.Bandsintown.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId");
                });

            modelBuilder.Entity("Spotkick.Models.Bandsintown.Offer", b =>
                {
                    b.HasOne("Spotkick.Models.Bandsintown.Event")
                        .WithMany("Offers")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("Spotkick.Models.Playlist", b =>
                {
                    b.HasOne("Spotkick.Models.User", "OwnedBy")
                        .WithMany("Playlists")
                        .HasForeignKey("OwnedById");
                });

            modelBuilder.Entity("Spotkick.Models.User", b =>
                {
                    b.HasOne("Spotkick.Models.Spotify.Token", "Token")
                        .WithMany()
                        .HasForeignKey("TokenId");
                });
#pragma warning restore 612, 618
        }
    }
}
